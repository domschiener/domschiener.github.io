<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dominik Schiener</title>
    <description>Personal Blog of Dominik Schiener. Mostly about Entrepreneurship, Technology and Research I&#39;m working on.
</description>
    <link>http://schiener.me/</link>
    <atom:link href="http://schiener.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 29 Oct 2015 11:04:11 +0100</pubDate>
    <lastBuildDate>Thu, 29 Oct 2015 11:04:11 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>[Raspberry Pi] Smarter Plants Tutorial</title>
        <description>&lt;p&gt;This is a small side project I’ve been working on in my free time. The main reason why I started working on this was to learn more Python and Javascript, but to also get better with hardware related projects with the Raspberry Pi. And what better way to learn is there, than actually doing it and creating a step-by-step guide on how it works? So here we are, with this tutorial about a Soil Moisture Control through your Raspberry Pi!&lt;/p&gt;

&lt;p&gt;At the end of this tutorial you will have a working Raspberry Pi with Soil Moisture Sensors wired up that is able to take data from your plant, store it in a CSV file and visualize it on a nice dashboard online. In addition to that, you will also be able to control your plant via Twitter. That means your plant will be able to tell you if it needs to be watered via a Tweet.&lt;/p&gt;

&lt;p&gt;Overall, this project is work in progress and I intend to add more features to it and improvise the existing code. Most importantly, adding an automatic irrigation system will be the right step in creating a completely autonomous plant. A plant that is able to automatically satisfy its needs, that sounds pretty cool, right? One step closer to AI (sort of).&lt;/p&gt;

&lt;p&gt;I’m mostly still a beginner with Raspberry Pi related development, so I did take help from people that have already created similar projects and I would like to publicly acknowledge some of them here: Jeremy Blythe with his amazing tutorial on setting up the Pi with the moistures sensors, seempie who wrote a similar tutorial and the people who created some amazing D3.js visualizations (named later). This tutorial takes pieces from all of these tutorials and combines them with new ones to create a perfect tutorial for beginners to get started.&lt;/p&gt;

&lt;p&gt;Lets get started!&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;p&gt;This tutorial is divided into 5 sections. First we are going to get the Pi’s GPIO properly wired up with the sensor on a breadboard, then we are going to write the Python script that takes the data and stores it in our CSV file, following with actually enabling the Pi to act as a Server (LAMP), then we will display the data on our website and visualize it through D3.js and lastly, we will add some tweaks through the Twitter integration.&lt;/p&gt;

&lt;h3 id=&quot;what-you-will-need&quot;&gt;What you will need&lt;/h3&gt;

&lt;p&gt;In total, this setup has cost around $20 without the actual Raspberry Pi. You will obviously need all the prerequisites, which are a working Raspberry Pi, with a keyboard, mouse and a monitor. Here is a list of the other things you will need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Soil Moisture Sensor: $4.50. I recommend getting this one from elecfreaks (http://www.elecfreaks.com/store/octopus-soil-moisture-sensor-brick-p-422.html). As they doesn’t ship globally, I’ve had to use a different Moisture Sensor (http://www.play-zone.ch/de/erd-feuchtigkeitssensor-mit-digital-und-analogausgang.html), but it works the same.&lt;/li&gt;
  &lt;li&gt;MCP3008: $3.75 http://www.adafruit.com/products/856&lt;/li&gt;
  &lt;li&gt;Breadboard: $5&lt;/li&gt;
  &lt;li&gt;Breakout Cable or around six female-to-male jumper wires. Cost: $5&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-1-wiring-the-sensor&quot;&gt;Step 1: Wiring the Sensor&lt;/h2&gt;

&lt;p&gt;//TODO&lt;/p&gt;

&lt;h3 id=&quot;installing-apache-web-server&quot;&gt;Installing Apache Web Server&lt;/h3&gt;

&lt;p&gt;Apache is the most used web server software that helps server our HTTP requests. The setup for Apache is pretty straight forward:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install apache2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If it isn’t running already, type in&lt;br /&gt;
&lt;code&gt;
$ sudo service apache2 start
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;127.0.0.1&lt;/code&gt; and check if it’s working, if not the installation may have been faulty and you have to do some troubleshooting by Googling.&lt;/p&gt;

&lt;h3 id=&quot;enabling-python-for-apache&quot;&gt;Enabling Python for Apache&lt;/h3&gt;

&lt;p&gt;Now for this tutorial all the code is in Python, so we need to prepare the web server to run Python. We basically have to enable CGI Programming, described by &lt;a href=&quot;http://www.tutorialspoint.com/python/python_cgi_programming.htm&quot;&gt;TutorialsPoint&lt;/a&gt; “Common Gateway Interface, or CGI, is a set of standards that define how information is exchanged between the web server and a custom script.”.&lt;/p&gt;

&lt;p&gt;As Python is already fully installed on your Raspberry Pi, you have to install the &lt;code&gt;python-setuptools helper package&lt;/code&gt; and the &lt;code&gt;mod-wsgi&lt;/code&gt; Apache module to enable us to run Python applications on our Apache server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install python-setuptools libapache2-mod-wsgi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to edit the config file, so that the Apache server actually executes our .py files.&lt;br /&gt;
Type in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo nano /etc/apache2/sites-available/default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then change the current &lt;em&gt;&amp;lt;Directory /var/www/&amp;gt;&lt;/em&gt; to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;Directory /var/www/&amp;gt;
	Options ExecCGI Indexes FollowSymLinks MultiViews
	AllowOverride None
	Order allow, deny
	allow from all
	AddHandler cgi-script.py
&amp;lt;Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now save and close the file. Then restart the server&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo service apache2 restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now our Apache server should be able to run Python scripts. Lets make a small test just to be sure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /var/www/
$ sudo nano testpython.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then type in the following test code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;
#!/usr/bin/python

print &quot;Content-type:text/html\r\n\r\n&quot;
print “&amp;lt;html&amp;gt;”
print “&amp;lt;body&amp;gt;”
print “&amp;lt;h1&amp;gt;Lets see if our Python works!&amp;lt;/h1&amp;gt;”
print “&amp;lt;br&amp;gt;”
for i in range(6):
    print “&amp;lt;h3&amp;gt;
    print “Test: “ + str(i)
    print “&amp;lt;/h3&amp;gt;”
print “&amp;lt;/body&amp;gt;”
print “&amp;lt;/html&amp;gt;”
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If all is well, you should see the following page, all working well and displaying the code as intended.&lt;/p&gt;

&lt;h3 id=&quot;storing-data-with-csv&quot;&gt;Storing Data with CSV&lt;/h3&gt;

&lt;p&gt;Now some of you may wonder why we are not completing the full LAMP setup by using MySQL to store the Data. The reason for that is because of D3.js, which we are using for visualizing the data. Since D3.js works with CSV, TSV or JSON formatted data, if we were to choose MySQL we would first have to enter the data into our MySQL table and then later convert the data into CSV/TSV/JSON, which is a cumbersome process and makes things complicated.&lt;/p&gt;

&lt;p&gt;That’s why we instead write to a CSV file directly and retrieve the data later when we visualize it on the website (3 steps turned into 2). As for the reason why we chose CSV, this is mainly because with JSON we cannot append data to the existing file. We would first have to load the entire data into a local array, append our data to it and then save it back into our JSON file. Such a process will certainly slow down our program as we accumulate more data from our plant. That’s why we choose a CSV, where we can append the data at the end of the file without having to load the entire data in first.&lt;/p&gt;

&lt;p&gt;For this you now simply have to create a data.csv file with the following header:&lt;br /&gt;
&lt;code&gt;moisture,perc,date,time,weekday&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is the description of the data we are retrieving and will make it possible for us to later make use of them in Javascript.&lt;/p&gt;

&lt;h3 id=&quot;installing-spidev-and-python-dev&quot;&gt;Installing SpiDev and Python-Dev&lt;/h3&gt;

&lt;p&gt;Since we are using the SPI (Serial Peripheral Interface) bus for this tutorial, we are going to use the SpiDev wrapper in order to interact with our sensor. Python-dev is another library we require.&lt;/p&gt;

&lt;p&gt;Run the following command:&lt;br /&gt;
&lt;code&gt;
$ sudo apt-get install python-dev
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we need to enable the SPI communication on our Raspberry Pi, which is pretty straight forward. Just head to the following link and follow its steps: http://www.raspberrypi-spy.co.uk/2014/08/enabling-the-spi-interface-on-the-raspberry-pi/&lt;/p&gt;

&lt;p&gt;Afterwards you have successfully restarted, type in:&lt;br /&gt;
&lt;code&gt;
$ cd ~
$ git clone https://github.com/Gadgetoid/py-spidev
$ cd py-spidev/
$ sudo python setup.py install
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With this in hand we should be read to go and can now finally test our sensor on a plant! Congratz on making it so far, you can be sure that your plant will appreciate it.&lt;/p&gt;

&lt;h2 id=&quot;step-3-coding&quot;&gt;Step 3: Coding&lt;/h2&gt;

&lt;p&gt;Now the simplest program for us is to display the data into the terminal window. This program is great for testing if all the wiring is correct and your sensor is actually getting, converting and displaying the right data. This code was written by seempie from Instructables.com and it works as a base for us to add features as we proceed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#! /usr/bin/python
# python program to communicate with an MCP3008.
# Base Code written by seempie from instructables.com

# Import SpiDev wrapper and our sleep function
import spidev
from time import sleep

# Establish SPI device on Bus 0,Device 0
spi = spidev.SpiDev()
spi.open(0,0)

def getAdc(channel):
    #check valid channel
    if ((channel&amp;gt;7)or(channel&amp;lt;0)):
        return -1

    while True:
        # Perform SPI transaction and store returned bits in &#39;r&#39;
        r = spi.xfer([1, (8+channel) &amp;lt;&amp;lt; 4, 0])

        #Filter data bits from retruned bits
        adcOut = ((r[1]&amp;amp;3) &amp;lt;&amp;lt; 8) + r[2]
        percent = int(round(adcOut/10.24))

        #print out 0-1023 value and percentage
        print &quot;ADC Output: {0:4d} Percentage: {1:3}%&quot;.format (adcOut,percent)
        sleep(10)

if __name__ == &#39;__main__&#39;:
    getAdc(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should display the moisture of our plant and the percentage of it relative to the maxium (which happens to be 1024). Now before we actually get to more coding, we need to start collecting more data to be able to better understand it.&lt;/p&gt;

&lt;h3 id=&quot;preparing-the-data&quot;&gt;Preparing the Data&lt;/h3&gt;

&lt;p&gt;Now the data here will vary depending on which sensor you have. What I highly suggest is that you run a few tests and determine what the upper bound and lower bound of the data is, meaning when the plant is completely wet or completely dry and what the average is. This way we can more better determine what the data should be and how we should properly visualize it on our website later on.&lt;/p&gt;

&lt;p&gt;For determining the upper bound, meaning when the plant is completely dry, we simply place the sensor outside (not in the plant) and then run a few tests. In my case, the upper bound limit happens to be 1024.&lt;br /&gt;
The lower bound is determined by placing the sensor in a glass of water, where I got around 300. For detecting the average we simply place the sensor in the plant when we think it is in a “normal” state (normal defined that it wasn’t watered just recently and is also not too dry). Here the data can vary quite dramatically, and I have gotten between 600 - 850 depending on where in the pot I inserted the sensor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/FkEJxza.jpg&quot; alt=&quot;alt tag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the data we gathered we can now more easily characterize the data we got and actually understand what it means.&lt;/p&gt;

&lt;h3 id=&quot;fixing-permissions&quot;&gt;Fixing Permissions&lt;/h3&gt;

&lt;p&gt;Now we need to fix the permissions so that we have access from our /www folder directly to the SPI:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo adduser www-data spi
sudo adduser &amp;lt;username&amp;gt; www-data
sudo chown -R :www-data /var/www
sudo chmod -R g+rw /var/www
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace &lt;username&gt; with your username.&lt;/username&gt;&lt;/p&gt;

&lt;h2 id=&quot;enabling-automated-twitter-messaging&quot;&gt;Enabling automated Twitter messaging&lt;/h2&gt;
&lt;p&gt;Now that we have our Raspberry setup with a nice looking panel, it’s time to enable Twitter communication, so that our plant can tell us when it needs to be watered and we can ask it about status reports.&lt;/p&gt;

&lt;p&gt;What we are going to code here right now is an automated messaging (or lets say tweeting) system that enables the plant to send out tweets if its running dry and needs to be watered. We can additionally send a tweet directly to the plant and get a status about its moisture and if everythings ok. Lets get started!&lt;/p&gt;

&lt;p&gt;Creating a Twitter Application and Installing Tweepy&lt;/p&gt;

&lt;p&gt;First of all we will need to create a new Twitter account for our plant. Since you actually care about your plant (else you wouldn’t follow this tutorial), take a profile picture for it as well and add some details (you can check out my plant over here: https://twitter.com/domsplant).&lt;/p&gt;

&lt;p&gt;Once that is done, we will need to setup an application so that our plant (or rather the Raspberry Pi) can login to the Twitter account and communicate through it with OAuth.&lt;br /&gt;
&lt;code&gt;
$ git clone https://github.com/tweepy/tweepy.git
$ cd tweepy
$ python setup.py install
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you see an SSL error,&lt;br /&gt;
&lt;code&gt;
$ sudo pip install requests[security]
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you need to go to the &lt;em&gt;twitter.py&lt;/em&gt; file and add your consumer key, consumer secret, as well as access token and access token secret which was provided to you by Twitter.&lt;/p&gt;

&lt;h1 id=&quot;running-the-application&quot;&gt;Running the Application&lt;/h1&gt;

&lt;p&gt;Now everything should be ready to function and we can start testing it all. Simply run:&lt;br /&gt;
&lt;code&gt;
$ sudo python main.py
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This in turn will run twitter.py and getdata.py in the background. You can now go to &lt;em&gt;http://localhost&lt;/em&gt; and everything should be operational :)&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Oct 2015 20:34:14 +0200</pubDate>
        <link>http://schiener.me/projects/2015/10/21/raspberry-pi-smart-plant.html</link>
        <guid isPermaLink="true">http://schiener.me/projects/2015/10/21/raspberry-pi-smart-plant.html</guid>
        
        
        <category>projects</category>
        
      </item>
    
      <item>
        <title>Prosperity for the neglected, ignored and forgotten</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/seeds-growing.jpeg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The World is Flat. Pythagoras assumption that the world is spherical is erroneous, Eratosthenes calculation of the Earth’s circumference is based on a methodological fallacy and Magellan’s trip around the globe was orchestrated by the Spanish crown in order to retain its upper hand over the archrival Portugal&lt;/p&gt;

&lt;p&gt;…well, not quite. Our world, of course, is spherical, Eratosthenes calculations are only 16% off the real measures and conspiracy theorists will be silenced after looking at the factual proof of Magellan’s voyage around the globe in 1520.&lt;/p&gt;

&lt;p&gt;What is implied with the argument “our world is flat” is the fact that barriers, limitations and restrictions have been erased in order to permit a more frictionless interactivity, connectivity and transportation between humans. This flattening is the output of the symbiosis between the great flattening forces (economical, technological and cultural). Humans have progressed, or lets say evolved, phenomenally since our modest beginnings as hunters and gatherers with sticks and stones. Today we live in a society where communication and connectivity goes beyond our exosphere, where information is able to flow freely to (nearly) everyone and where opportunities are only limited to ones imagination. In short, it’s an amazing time to be human, and it’s only getting better with more technological and medical innovations.&lt;/p&gt;

&lt;p&gt;But sadly, the majority of people don’t have access to this progress and the opportunities it brings within yet. Nearly 1 billion people still struggle to survive on $1.25 per day, 2.5 billion people still lack access to adequate sanitation and education is still a largely unsolved problem in developing countries. So much for global connectivity when not even the basic needs are covered for the majority of our species.&lt;/p&gt;

&lt;p&gt;Even though the numbers of the poor are still absurdly high - they have actually been on a consistent decline for the past few decades. The poor are better off today than they were ever before - all thanks to the great flattening forces.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-history-and-effects-of-flattening&quot;&gt;The History and Effects of Flattening&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
Barriers shut off light that is vital for growth, progress and prosperity. They drastically restrict us in nearly every aspect and only serve to protect the pride, intentions and the privileged positions of a few who are in power. Humans have been building and eradicating barriers for millennias - and sadly, we are sometimes diligently building.&lt;/p&gt;

&lt;p&gt;The two most important paradigm shifts of our society were our progress from hunter and gatherer to agricultural to industrial societies and the invention of money. The former enabled creativity by freeing up human resources; the latter allowed us to trade, invest and save - thus, create wealth. Both of these developments progressed our distinction from animals, but far more important: they made specialization (division of labor) possible.&lt;/p&gt;

&lt;p&gt;Specialization is the fundament on which creativity, innovation and human progress are based on. It frees up humans of unnecessary tasks and permits them to focus on those tasks that are to their liking and of their skillset. By making it possible for humans to specialize in their respective domain we get experts who, through collaboration with other experts, can pool their resources and knowledge to create fascinating new inventions that benefit the others. Division of labor was, and still is, one of the most effective forces in eradicating barriers to flatten our world.&lt;/p&gt;

&lt;p&gt;The most known form of division of labor in today’s time is outsourcing. Delegating work to other teams, who possess distinctive advantages over ones own capabilities, enables more variety, higher quality, faster production and cheaper prices for products and services - which greatly benefits consumers. This delegation provides work to those who were previously suppressed in their economic and personal freedom by imperialists and to those who were neglected during the Industrial Revolution.&lt;/p&gt;

&lt;p&gt;In order for division of labor to succeed we need unified systems, standards, protocols and agreements that greatly eradicate barriers between countries, cultures and groups and thus enable a more frictionless flow of information, communication, collaboration and trade. By making it possible for anyone to collaborate with anyone and for anyone to acquire any publicly available information (especially educational material) we greatly reduce the gap between developed and developing countries. Flattening creates new opportunities that are able to be seized by (nearly) anyone.&lt;/p&gt;

&lt;p&gt;TCP/IP is the most important protocol invented in the past decades as it enabled us a crucial aspect for the connectivity of our modern society: the frictionless flow of data (and thus, information). This not only made global communication possible, it also allowed us to share information and more notably, knowledge with anyone. The barrier for education was drastically lowered. Today anyone with internet access can acquire accurate and plenty of information on various subjects and teach themselves anything. We are still at an early stage in this new “knowledge for anyone” development, but with the establishment of more, free online educational platforms we truly empower individuals and open up new opportunities to participate in our global economy.&lt;/p&gt;

&lt;p&gt;Outsourcing combined with protocols and trade agreements permits one of the most important effects of flattening: prosperity*.&lt;/p&gt;

&lt;p&gt;For one, flattening makes it cheaper for consumers to purchase goods and services, which in turn provides them with a surplus of money (which they can then save, invest or use to purchase more goods). The Flat World effects (such as outsourcing) of course also mean more work opportunities for those who didn’t have them before. This has lead to the rise of Mexico, China and India who today are strong and powerful economies thanks to their past (and present) as the “backoffice” and “workbench” of the Western World.&lt;/p&gt;

&lt;p&gt;One of the most recent developments in flattening, and likely the most significant one, was the flattening of innovation. The dotcom haze required young Startups to raise money in the dozens of millions in order to just get started. Money was required for expensive proprietary software, for server infrastructures, for development and for advertising. Today, a fraction of the money in the 90’s is required to launch a Startup. With new innovations in terms of communication, connectivity, development and publications we have made it easy, fast and cheap for innovation to happen and for entrepreneurship to be pursued. The flattening of innovation is still in its early stages, but once it’s running at full steam we will see a drastic improvement both in terms of quality and speed of release of new inventions. Flattening is a cascade&lt;/p&gt;

&lt;p&gt;In short, a flat world enables people to create and accumulate wealth, it opens many new more opportunities in countries that have never had such before and it helps in creating a more equal and interconnected world.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-next-step-in-flattening-the-world&quot;&gt;The next Step in Flattening the World&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
The gap between rich and poor, privileged and disadvantaged and the educated and uneducated has been greatly reduced on a global scale (though in some cases, the gap sadly increased). In the past few decades we have seen the flattening of education, of communication and connectivity, of work and collaboration and most importantly, of innovation. Even though we have made huge leaps forward in the century, we do still have barriers to eradicate in order to achieve that one true goal of an equal and fair environment for everyone.&lt;/p&gt;

&lt;p&gt;The one sector that is long overdue to innovational progress is the finance sector. No sector has more importance on human development, yet is so reluctant to innovation, than our finance sector. The sad truth is that most of our finance behemoths are too busy playing the zero-sum game of trading with ever increasing (both in quantity and complexity) financial instruments against themselves, and those they are supposed to serve.&lt;/p&gt;

&lt;p&gt;Innovation in today’s finance sector is the invention of a new, complex trading instrument that is able to bypass the laws and regulations of the SEC in order to sell dogshit disguised as gold. Such behavior is greatly rewarded by the industry and if things go wrong, the thieves are rescued and put back in their position to craft new “solutions” that succeed in deceiving and stealing from others to fill their own pocket.&lt;/p&gt;

&lt;p&gt;This leaves us to no surprise that more than half of our entire population is underbanked or unbanked. With no access to capital, with no way to save, to invest, to borrow, to accumulate wealth we completely ignore a very powerful equalizer force and destroy the dreams of wealth, prosperity and growth of economies we classify as “developing” and “least developed”. One may ask if the pursuit of economic and social growth from developing to developed economy is damned for eternity?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Where is the innovation? Where is the progress? Where is the change?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is apparent to all of us that the majority of the current banking sector shows no interest to build solutions that help the unbanked. In many cases they actively fight and suppress innovation in order to retain their power over our finances (a prime example being M-Pesa in Kenya, which the existing banks actively fought in legal battles). Who doesn’t want to fight the inevitability of becoming obsolete?&lt;/p&gt;

&lt;p&gt;A new, disruptive and unstoppable solution needs to emerge. A protocol that will unify us all in the way we conduct trade, store and transmit value, in the way we invest, accumulate wealth and prosper. It will be one of the last equalizer forces needed in order to fully empower individuals and to give everyone the power and the opportunities they need to pursue and realize their dreams.&lt;/p&gt;

&lt;p&gt;Luckily we no longer have to wait for such a solution to emerge - blockchain-based technologies (most notably Bitcoin) are already here and even though still in its infancy, it holds promise to create a globally unified, fully transparent and accessible finance system. More about this development in my next blog post.&lt;/p&gt;

&lt;h6 id=&quot;a-reader-may-ask-now-has-globalization-significantly-improved-the-situation-between-rich-and-poor-the-answer-is-a-bit-complicated-on-one-end-globalization-has-united-us-on-many-levels-and-allowed-us-to-collaborate-in-order-to-create-amazing-new-products---which-provided-work-and-new-opportunities-to-people-that-have-never-had-them-before-but-on-the-other-end-globalization-has-also-quite-largely-increased-the-gap-between-the-rich-and-the-poor-globalization-created-free-capital-which-i-will-discuss-in-later-blog-posts-which-made-it-possible-for-capital-to-pursue-the-highest-roi-opportunities-available-as-the-name-says-the-capital-is-free-to-pursue-whichever-opportunity-they-deem-as-profitable-this-is-why-weve-seen-corporates-creating-thousands-of-jobs-in-low-income-countries-in-a-short-time-span-but-as-new-opportunities-were-opened-these-people-were-quickly-fired-and-replaced-by-other-cheaper-workers-in-different-countries-this-is-one-of-the-worst-side-effects-of-globalization&quot;&gt;* A reader may ask now “Has globalization significantly improved the situation between rich and poor?” The answer is a bit complicated. On one end, globalization has united us on many levels and allowed us to collaborate in order to create amazing new products - which provided work and new opportunities to people that have never had them before. But on the other end globalization has also quite largely increased the gap between the rich and the poor. Globalization created Free Capital (which I will discuss in later blog posts) which made it possible for capital to pursue the highest ROI opportunities available. As the name says, the capital is free to pursue whichever opportunity they deem as profitable. This is why we’ve seen corporates creating thousands of jobs in low-income countries in a short time span, but as new opportunities were opened, these people were quickly fired and replaced by other cheaper workers in different countries. This is one of the worst side effects of globalization.&lt;/h6&gt;
</description>
        <pubDate>Wed, 21 Oct 2015 15:34:14 +0200</pubDate>
        <link>http://schiener.me/future/2015/10/21/prosperity-for-the-neglected.html</link>
        <guid isPermaLink="true">http://schiener.me/future/2015/10/21/prosperity-for-the-neglected.html</guid>
        
        
        <category>future</category>
        
      </item>
    
  </channel>
</rss>
